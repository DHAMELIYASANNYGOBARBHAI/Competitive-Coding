
    int fun(int wt[],int val[],vector<vector<int>> &dp,int n,int w)
    {
        if(n==0 || w==0)
        return 0;
        
        if(dp[n][w]!=-1)
        return dp[n][w];
        
        int ans=0;
        
        if(wt[n-1] <= w)
        {
            ans=max(fun(wt,val,dp,n-1,w-wt[n-1]) + val[n-1] , fun(wt,val,dp,n-1,w));
        }
        else
        ans=fun(wt,val,dp,n-1,w);
        
        
        dp[n][w]=ans;
        
        return dp[n][w];
        
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       vector<vector<int>>dp(n+1,vector<int>(W+1, -1));
       
       for(int i=0;i<n+1;i++)
       {
           for(int j=0;j<W+1;j++)
           {
               if(i==0 || j==0)
                 dp[i][j]=0;
                 else
                 {
                     
                     if(j < wt[i-1])
                       dp[i][j]=dp[i-1][j];
                     else
                     dp[i][j] = max(dp[i-1][j-wt[i-1]] + val[i-1],dp[i-1][j]);
                 }
           }
       }
       
       
       
     //  fun(wt,val,dp,n,W);
       
       return dp[n][W];
       
    }