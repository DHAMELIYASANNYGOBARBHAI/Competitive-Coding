class Solution{
    public:
    
    int fun(int x,int y,vector< vector<int> > &vec,vector< vector<int> > &visit,vector<string> &path,string str)
{
    int n= vec.size();

    if(x== n-1 && y == n-1)
    {
        path.push_back(str);
        return 1;
    }
   

    visit[x][y]=1;
    

    int xx[]={1,0,0,-1};
    int yy[]={0,-1,1,0};
    string c[] ={"D","L","R","U"};

    int ans=0;
   
   for(int i=0;i<4;i++)
    {
        int xxx=xx[i]+x;
        int yyy=yy[i]+y;
        string temstr = str + c[i];

        if(xxx > -1 && yyy > -1 && xxx < n && yyy < n && visit[xxx][yyy]==0 && vec[xxx][yyy]==1)
        {
            ans=ans+fun(xxx,yyy,vec,visit,path,temstr);
           
        }  
    }

   
   visit[x][y]=0;

   return ans;


}

vector<string> findPath(vector<vector<int>> &m, int n) 
    {
        
 
    
    vector<vector<int>> vec( n , vector<int> (n, 0));

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            vec[i][j]=m[i][j];
        }
    }

    vector<vector<int>> visit( n , vector<int> (n, 0));

    vector<string>path;
    string str;

    if(vec[0][0]==0 || vec[n-1][n-1]==0) 
    return path;
    
    int x= fun(0,0,vec,visit,path,str);
    
    return path;
       
    }
};

    