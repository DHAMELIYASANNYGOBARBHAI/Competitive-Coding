 //Function to find the length of longest common subsequence in two strings.
    
    int fun(int x,int y,string &s1,string &s2,vector<vector<int>> &dp)
    {
        if(x==0 || y==0)
        return 0;
        
        
        if(dp[x][y]!=-1)
        return dp[x][y];
        
      
        
        if(s1[x-1]==s2[y-1])
        {
              dp[x][y] = fun(x-1,y-1,s1,s2,dp)+1;
        }
        else
        {
              dp[x][y] = max(fun(x-1,y,s1,s2,dp),fun(x,y-1,s1,s2,dp));
        }
        
        return dp[x][y];
        
    }
    
    int lcs(int x, int y, string s1, string s2)
    {
        vector<vector<int>>dp(x+5,vector<int>(y+5, 0));
        
        for(int i=0;i<=x;i++)
        {
            for(int j=0;j<=y;j++)
            {
                if(i==0 || j==0)
                dp[i][j]=0;
                else
                {
                    if(s1[i-1]==s2[j-1])
                    {
                        //cout<<s1[i]<<" "<<s2[j]<<endl;
                         //cout<<i<<" "<<j<<"-->"<<dp[i][j]<<endl;
                        dp[i][j]=dp[i-1][j-1]+1;
                    }
                    else
                    {
                        dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                    }
                }
                
               
            }
            
            //cout<<endl;
        }
        
        
        return dp[x][y];
        
        return fun(x,y,s1,s2,dp);
        
        
        
        
    }