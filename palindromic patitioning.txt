 int palindromicPartition(string str)
    {
       int n=str.size();
       int pld[n][n];
       
       
       for(int g=0;g<n;g++)
       {
           for(int j=g,i=0;j<n;j++,i++)
           {
               if(g==0)
               {
                   pld[i][j]=1;
               }
               else if(g==1)
               {
                   if(str[i]==str[j])
                   pld[i][j]=1;
                   else
                   pld[i][j]=0;
               }
               else
               {
                   if(str[i]==str[j])
                   {
                       pld[i][j]=pld[i+1][j-1];
                   }
                   else
                   {
                       pld[i][j]=0;
                   }
               }
               
                // cout<<str.substr(i,j-i+1)<<"--->"<<pld[i][j]<<endl;
           }
       }
       
       int dp[n][n];
       
       
       for(int g=0;g<n;g++)
       {
           for(int i=0,j=g;j<n;j++,i++)
           {
               if(pld[i][j]==1)
               {
                  // cout<<i<<" "<<j<<endl;
                  
                
                   dp[i][j]=0;
               }
               else
               {
                   int ans=INT_MAX;
                   
                   for(int k=i;k<j;k++)
                   {
                       ans=min(ans,dp[i][k]+dp[k+1][j]+1);
                   }
                   
                   dp[i][j]=ans;
               }
               
              // cout<<dp[i][j]<<" ";
               
           }
           
          // cout<<endl;
           
       }
       
       
       return dp[0][n-1];
    }